#!/usr/bin/env ruby

require "front_matter_parser"
require "net/http"
require "nokogiri"
require "yaml"

module Reorder
  # Crawls the docs page and find all the links in the Subnav and updates their subnav
  class Update
    def run
      uri = URI('http://localhost:4000/docs/')
      begin
        body = Net::HTTP.get(uri) # => String
      rescue Errno::ECONNREFUSED => e
        puts e
        puts "ERROR: Please make sure the jekyll server is running and server docs.  You can use:"
        puts "  bin/web"
      end

      Page.reset_all

      doc = Nokogiri::HTML(body)
      links = doc.search('.content-nav a')
      links.each_with_index do |link, i|
        page = Page.new(link[:href], i+1)
        page.update
      end
    end
  end

  class Page
    def initialize(link, nav_order)
      @link, @nav_order = link, nav_order
    end

    def self.reset_all
      Dir.glob("**/**.md").each do |path|
        link = path.sub('_','/').sub(/\.md$/,'/') # _docs/dsl.md => /docs/dsl/
        link = "/#{link}" unless link =~ /^\//    # quick-start  => /quick-start
        Page.new(link, :delete).update
      end
    end

    def update
      return if @link =~ /reference/ || @link =~ /includes/ || @link =~ /site/

      page_path = @link.sub('/','').sub(/\/$/,'') + ".md" # remove leading /
      page_path = "_#{page_path}" if page_path =~ /^docs\//

      unless File.exist?(page_path)
        puts "WARN: path #{page_path} not found"
        return
      end

      unless @nav_order == :delete
        puts "Updating #{page_path} with nav_order #@nav_order"
      end

      parsed = FrontMatterParser::Parser.parse_file(page_path)
      front_matter = parsed.front_matter
      return if front_matter.empty? # only add to front matter if there already a front matter

      if @nav_order == :delete
        front_matter.delete("nav_order")
      else
        front_matter["nav_order"] = @nav_order
      end
      new_front_matter = YAML.dump(front_matter)

      content = "#{new_front_matter}---\n\n#{parsed.content}"

      # Hack to remove current next prev links. Keep around for other sites.
      # result = []
      # lines = content.split("\n")
      # lines.each do |l|
      #   unless l.include?('<a id="prev" ') ||
      #         l.include?('<a id="next" ') ||
      #         l.include?('<p class="keyboard-tip')
      #     result << l
      #   end
      # end
      # content = result.join("\n")

      IO.write(page_path, content)
    end
  end
end

Reorder::Update.new.run
